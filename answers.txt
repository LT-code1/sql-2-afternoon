1.SELECT *
FROM invoice i
JOIN invoice_line il ON il.invoice_id = i.invoice_id
WHERE il.unit_price > 0.99;

2.SELECT i.invoice_date, c.first_name, c.last_name, i.total
FROM invoice i
JOIN customer c ON i.customer_id = c.customer_id;

3.SELECT c.first_name, c.last_name, e.first_name, e.last_name
FROM customer c
JOIN employee e ON c.support_rep_id = e.employee_id;

4.SELECT al.title, ar.name
FROM album al
JOIN artist ar ON al.artist_id = ar.artist_id;

5.SELECT pt.track_id
FROM playlist_track pt
JOIN playlist p ON p.playlist_id = pt.playlist_id
WHERE p.name = 'Music';

6.SELECT t.name
FROM track t
JOIN playlist_track pt ON pt.track_id = t.track_id
WHERE pt.playlist_id = 5;

7.SELECT t.name, p.name
FROM track t
JOIN playlist_track pt ON t.track_id = pt.track_id
JOIN playlist p ON pt.playlist_id = p.playlist_id;

8.SELECT t.name, a.title
FROM track t
JOIN album a ON t.album_id = a.album_id
JOIN genre g ON g.genre_id = t.genre_id
WHERE g.name = 'Alternative & Punk';
-----------------------------
1.SELECT *
FROM invoice
WHERE invoice_id IN ( SELECT invoice_id FROM invoice_line WHERE unit_price > 0.99 );

2.SELECT *
FROM playlist_track
WHERE playlist_id IN ( SELECT playlist_id FROM playlist WHERE name = 'Music' );

3.SELECT name
FROM track
WHERE track_id IN ( SELECT track_id FROM playlist_track WHERE playlist_id = 5 );

4.SELECT *
FROM track
WHERE genre_id IN ( SELECT genre_id FROM genre WHERE name = 'Comedy' );

5.SELECT *
FROM track
WHERE album_id IN ( SELECT album_id FROM album WHERE title = 'Fireball' );

6.SELECT *
FROM track
WHERE album_id IN ( 
  SELECT album_id FROM album WHERE artist_id IN ( 
    SELECT artist_id FROM artist WHERE name = 'Queen'
  )
); 
------------------------------
1. UPDATE customer
SET fax = null
WHERE fax IS NOT null;

2.UPDATE customer
SET company = 'Self'
WHERE company IS null;

3.UPDATE customer 
SET last_name = 'Thompson' 
WHERE first_name = 'Julia' AND last_name = 'Barnett';

4.UPDATE customer
SET support_rep_id = 4
WHERE email = 'luisrojas@yahoo.cl';

5.UPDATE track
SET composer = 'The darkness around us'
WHERE genre_id = ( SELECT genre_id FROM genre WHERE name = 'Metal' )
AND composer IS null;
---------------------------------------
1.SELECT COUNT(*), g.name
FROM track t
JOIN genre g ON t.genre_id = g.genre_id
GROUP BY g.name;

2.SELECT COUNT(*), g.name
FROM track t
JOIN genre g ON g.genre_id = t.genre_id
WHERE g.name = 'Pop' OR g.name = 'Rock'
GROUP BY g.name;

3.SELECT ar.name, COUNT(*)
FROM album al
JOIN artist ar ON ar.artist_id = al.artist_id
GROUP BY ar.name;
----------------------------------
1.SELECT DISTINCT composer
FROM track;

2.SELECT DISTINCT billing_postal_code
FROM invoice;

3.SELECT DISTINCT company
FROM customer;
-------------------------------
1.DELETE 
FROM practice_delete 
WHERE type = 'bronze';

2.DELETE 
FROM practice_delete 
WHERE type = 'silver';

3.DELETE 
FROM practice_delete 
WHERE value = 150;
---------------------------
CREATE TABLE productssql(
product_id SERIAL NOT NULL PRIMARY KEY,
name text,
price int,
order_id int REFERENCES orderssql(order_id)
)

INSERT INTO productssql (name,price,order_id)
VALUES ('hat',5,1),
('shirt',10,1),
('pants',12,2),
('shoes',15,3)


CREATE TABLE userssql(
user_id SERIAL NOT NULL PRIMARY KEY,
name text,
email text
)

INSERT INTO userssql (name,email)
VALUES ('user1','test1@gmail'),
('user2','test2@gmail'),
('user3','test3@gmail'),
('user4','test4@gmail')

CREATE TABLE orderssql(
order_id SERIAL NOT NULL PRIMARY KEY,
user_id int REFERENCES userssql(user_id)
)

INSERT INTO orderssql (user_id)      //create unique order for user
VALUES ($1);
SELECT orders_id FROM orders
WHERE user_id = $1;

INSERT INTO orderssql (user_id)
VALUES (5),
(5),
(6),
(7),
(8);
------
SELECT                    //gets all items for order 1
   productssql.name,
   productssql.price
FROM productssql
INNER JOIN orderssql
ON productssql.order_id = orderssql.order_id
WHERE productssql.order_id=1;
----
SELECT *
FROM productssql
GROUP BY order_id,productssql.product_id
ORDER BY order_id
--------
SELECT SUM(productssql.price)
FROM productssql
WHERE productssql.order_id=1;
---------
SELECT *     // this gets all orders for given user id of 5
FROM orderssql
WHERE orderssql.user_id = 5;
-----------
SELECT COUNT (*)   //gets count
FROM orderssql
WHERE orderssql.user_id = 5;
-----------
ALTER TABLE userssql ADD COLUMN order_id INT;    

ALTER TABLE userssql
  ADD CONSTRAINT userssql_orderssql_fkey FOREIGN KEY (order_id)
      REFERENCES orderssql (order_id)
      ON UPDATE CASCADE ON DELETE CASCADE;











